// Service pour l'API Gemini de Google
const GEMINI_API_KEY = import.meta.env.VITE_GEMINI_API_KEY;
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent';

// Validation de la cl√© API
if (!GEMINI_API_KEY) {
  console.error('‚ö†Ô∏è VITE_GEMINI_API_KEY non d√©finie dans les variables d\'environnement');
  console.error('üìù Cr√©ez un fichier .env √† la racine du projet avec :');
  console.error('VITE_GEMINI_API_KEY=votre_cle_api_ici');
}

export interface GeminiResponse {
  candidates: Array<{
    content: {
      parts: Array<{
        text: string;
      }>;
    };
  }>;
}

export interface SoilAnalysisPrompt {
  location: string;
  soilType?: string;
  ph?: number;
  nutrients?: {
    nitrogen: number;
    phosphorus: number;
    potassium: number;
  };
  imageBase64?: string;
}

export interface CropRecommendationPrompt {
  soilData: SoilAnalysisPrompt;
  climate: string;
  season: string;
  marketDemand?: string;
}

export interface InvestmentAnalysisPrompt {
  projectData: {
    title: string;
    description: string;
    cropType: string;
    investmentAmount: number;
    location: string;
    duration: number;
  };
  marketData?: any;
}

export interface StructuredCropRecommendation {
  crop: string;
  suitability: number;
  expectedYield: string;
  marketDemand: string;
  plantingPeriod: string;
  harvestPeriod: string;
  tips: string[];
}

export interface StructuredSoilAnalysis {
  recommendations: StructuredCropRecommendation[];
  analysis: string;
}

class GeminiService {
  private async makeRequest(prompt: string, imageBase64?: string) {
    try {
      // V√©rification de la cl√© API
      if (!GEMINI_API_KEY) {
        throw new Error('Cl√© API Gemini non configur√©e');
      }

      const requestBody: any = {
        contents: [{
          parts: [{
            text: prompt
          }]
        }]
      };

      // Ajouter l'image si fournie
      if (imageBase64) {
        requestBody.contents[0].parts.push({
          inline_data: {
            mime_type: "image/jpeg",
            data: imageBase64
          }
        });
      }

      console.log('ü§ñ Envoi de requ√™te √† Gemini API...');
      
      // Essayer d'abord avec gemini-1.5-flash
      let response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      });

      // Si √ßa ne marche pas, essayer avec gemini-pro
      if (!response.ok) {
        console.log('üîÑ Tentative avec gemini-pro...');
        const fallbackUrl = 'https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent';
        response = await fetch(`${fallbackUrl}?key=${GEMINI_API_KEY}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(requestBody)
        });
      }

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Erreur Gemini API:', response.status, errorText);
        throw new Error(`Erreur Gemini API (${response.status}): ${errorText}`);
      }

      const data: GeminiResponse = await response.json();
      const result = data.candidates[0]?.content?.parts[0]?.text || 'Aucune r√©ponse g√©n√©r√©e';
      
      console.log('‚úÖ R√©ponse Gemini re√ßue');
      return result;
    } catch (error) {
      console.error('‚ùå Erreur Gemini API:', error);
      throw error;
    }
  }

  // Analyse de sol avec IA
  async analyzeSoil(prompt: SoilAnalysisPrompt): Promise<string> {
    const systemPrompt = `Tu es un expert agronome sp√©cialis√© dans l'analyse de sol et les cultures africaines. 
    
    Analyse les donn√©es suivantes et fournis des recommandations d√©taill√©es :
    
    Localisation: ${prompt.location}
    Type de sol: ${prompt.soilType || 'Non sp√©cifi√©'}
    pH: ${prompt.ph || 'Non mesur√©'}
    Nutriments: ${prompt.nutrients ? `N: ${prompt.nutrients.nitrogen}, P: ${prompt.nutrients.phosphorus}, K: ${prompt.nutrients.potassium}` : 'Non mesur√©s'}
    
    Fournis une analyse structur√©e avec :
    1. √âvaluation de la qualit√© du sol
    2. Cultures recommand√©es avec pourcentages d'adaptation
    3. Techniques agricoles traditionnelles locales
    4. Recommandations de fertilisation
    5. Conseils pour am√©liorer la productivit√©
    
    R√©ponds en fran√ßais et sois sp√©cifique au contexte africain.`;

    return this.makeRequest(systemPrompt, prompt.imageBase64);
  }

  // Recommandations de cultures
  async getCropRecommendations(prompt: CropRecommendationPrompt): Promise<string> {
    const systemPrompt = `En tant qu'expert en agriculture africaine, recommande les meilleures cultures pour :
    
    Localisation: ${prompt.soilData.location}
    Climat: ${prompt.climate}
    Saison: ${prompt.season}
    Donn√©es du sol: ${JSON.stringify(prompt.soilData)}
    
    Fournis :
    1. Top 5 cultures recommand√©es avec pourcentages d'adaptation
    2. Rendements attendus
    3. P√©riodes de plantation et r√©colte
    4. Techniques traditionnelles locales
    5. Analyse de march√© et rentabilit√©
    6. Conseils pratiques pour chaque culture
    
    Sois pr√©cis et utilise les connaissances locales africaines.`;

    return this.makeRequest(systemPrompt);
  }

  // Analyse d'investissement
  async analyzeInvestment(prompt: InvestmentAnalysisPrompt): Promise<string> {
    const systemPrompt = `Tu es un expert en finance agricole et investissement. 
    
    Analyse ce projet d'investissement agricole :
    
    ${JSON.stringify(prompt.projectData, null, 2)}
    
    Fournis une analyse compl√®te :
    1. √âvaluation des risques (faible/moyen/√©lev√©)
    2. Potentiel de rendement
    3. Analyse de march√©
    4. Recommandations d'am√©lioration
    5. Comparaison avec des projets similaires
    6. Conseils pour optimiser l'investissement
    
    Sois r√©aliste et utilise des donn√©es du march√© africain.`;

    return this.makeRequest(systemPrompt);
  }

  // Conseils personnalis√©s
  async getPersonalizedAdvice(userQuery: string, context: any): Promise<string> {
    const systemPrompt = `Tu es l'assistant IA de TerraNobis, une plateforme agricole africaine.
    
    Contexte utilisateur: ${JSON.stringify(context)}
    Question: ${userQuery}
    
    Fournis des conseils personnalis√©s, pratiques et adapt√©s au contexte africain.
    Utilise les savoirs ancestraux et les techniques modernes.
    Sois encourageant et motivant.`;

    return this.makeRequest(systemPrompt);
  }

  // Analyse d'image de sol avec recommandations structur√©es
  async analyzeSoilImage(imageBase64: string, location: string): Promise<StructuredSoilAnalysis> {
    const systemPrompt = `Tu es un expert en analyse visuelle de sol et en agriculture africaine.
    
    Analyse cette image de sol prise √† ${location}.
    
    IMPORTANT: Tu dois r√©pondre UNIQUEMENT au format JSON suivant, sans texte avant ou apr√®s :
    {
      "analysis": "Analyse d√©taill√©e et professionnelle du sol avec observations visuelles, texture, couleur, structure et qualit√© g√©n√©rale. Inclus des recommandations d'am√©lioration sp√©cifiques.",
      "recommendations": [
        {
          "crop": "Nom de la culture",
          "suitability": 85,
          "expectedYield": "1.2 tonnes/hectare",
          "marketDemand": "√âlev√©e",
          "plantingPeriod": "Juin - Juillet",
          "harvestPeriod": "Octobre - Novembre",
          "tips": [
            "Conseil pratique d√©taill√© et sp√©cifique",
            "Technique ancestrale adapt√©e",
            "Recommandation d'am√©lioration du sol"
          ]
        }
      ]
    }
    
    R√®gles strictes :
    - suitability doit √™tre un nombre entre 0 et 100
    - Fournis 3-5 cultures recommand√©es adapt√©es au contexte africain
    - Sois sp√©cifique au contexte local et utilise les connaissances traditionnelles
    - Inclus des conseils pratiques et d√©taill√©s
    - L'analyse doit √™tre professionnelle et encourageante
    - R√©ponds UNIQUEMENT en JSON valide, sans markdown, sans code blocks
    - Ne mets pas de backticks ou de blocs de code autour de ta r√©ponse
    `;

    try {
      console.log('ü§ñ Envoi de requ√™te d\'analyse d\'image √† Gemini...');
      const response = await this.makeRequest(systemPrompt, imageBase64);
      
      console.log('üìù R√©ponse brute de Gemini:', response);
      
      // Nettoyer la r√©ponse pour enlever les markdown si pr√©sents
      let cleanResponse = response.trim();
      if (cleanResponse.startsWith('```json')) {
        cleanResponse = cleanResponse.replace(/^```json\s*/, '').replace(/\s*```$/, '');
      } else if (cleanResponse.startsWith('```')) {
        cleanResponse = cleanResponse.replace(/^```\s*/, '').replace(/\s*```$/, '');
      }
      
      console.log('üßπ R√©ponse nettoy√©e:', cleanResponse);
      
      // Essayer de parser la r√©ponse JSON
      try {
        const parsed = JSON.parse(cleanResponse);
        console.log('‚úÖ JSON pars√© avec succ√®s:', parsed);
        
        // Valider la structure
        if (!parsed.recommendations || !Array.isArray(parsed.recommendations)) {
          throw new Error('Structure recommendations invalide');
        }
        
        return {
          analysis: parsed.analysis || "Analyse de sol effectu√©e avec succ√®s",
          recommendations: parsed.recommendations.map((rec: any) => ({
            crop: rec.crop || 'Culture non sp√©cifi√©e',
            suitability: typeof rec.suitability === 'number' ? rec.suitability : 75,
            expectedYield: rec.expectedYield || '1.0 tonnes/hectare',
            marketDemand: rec.marketDemand || 'Moyenne',
            plantingPeriod: rec.plantingPeriod || 'Juin - Juillet',
            harvestPeriod: rec.harvestPeriod || 'Octobre - Novembre',
            tips: Array.isArray(rec.tips) ? rec.tips : ['Conseils en cours de d√©veloppement']
          }))
        };
      } catch (parseError) {
        console.error('‚ùå Erreur parsing JSON Gemini:', parseError);
        console.log('üîç Tentative de nettoyage suppl√©mentaire...');
        
        // Tentative de nettoyage suppl√©mentaire
        let cleanedResponse = cleanResponse;
        // Enlever les caract√®res non-JSON au d√©but et √† la fin
        const jsonStart = cleanedResponse.indexOf('{');
        const jsonEnd = cleanedResponse.lastIndexOf('}') + 1;
        if (jsonStart !== -1 && jsonEnd > jsonStart) {
          cleanedResponse = cleanedResponse.substring(jsonStart, jsonEnd);
          console.log('üîß R√©ponse apr√®s nettoyage suppl√©mentaire:', cleanedResponse);
          
          try {
            const parsed = JSON.parse(cleanedResponse);
            console.log('‚úÖ JSON pars√© apr√®s nettoyage:', parsed);
            return {
              analysis: parsed.analysis || "Analyse de sol effectu√©e",
              recommendations: parsed.recommendations || []
            };
          } catch (secondParseError) {
            console.error('‚ùå √âchec du second parsing:', secondParseError);
          }
        }
        
        // Fallback : recommandations par d√©faut avec la r√©ponse brute comme analyse
        console.log('üîÑ Utilisation du fallback avec recommandations par d√©faut');
        return {
          analysis: `Analyse de sol pour ${location}: ${cleanResponse}`,
          recommendations: [
            {
              crop: 'Mil',
              suitability: 92,
              expectedYield: '1.2 tonnes/hectare',
              marketDemand: '√âlev√©e',
              plantingPeriod: 'Juin - Juillet',
              harvestPeriod: 'Octobre - Novembre',
              tips: [
                'Ajouter du compost organique pour am√©liorer la structure',
                'Planter apr√®s les premi√®res pluies',
                'Espacement recommand√©: 30cm entre les plants'
              ]
            },
            {
              crop: 'Arachide',
              suitability: 88,
              expectedYield: '0.8 tonnes/hectare',
              marketDemand: 'Tr√®s √©lev√©e',
              plantingPeriod: 'Mai - Juin',
              harvestPeriod: 'Septembre - Octobre',
              tips: [
                'Excellente pour fixer l\'azote dans le sol',
                'Rotation id√©ale avec le mil',
                'Surveillez les parasites pendant la croissance'
              ]
            },
            {
              crop: 'Ma√Øs',
              suitability: 75,
              expectedYield: '2.5 tonnes/hectare',
              marketDemand: 'Moyenne',
              plantingPeriod: 'Juin - Juillet',
              harvestPeriod: 'Octobre - Novembre',
              tips: [
                'N√©cessite un apport en fertilisant',
                'Arrosage r√©gulier requis',
                'Buttage recommand√© √† 6 semaines'
              ]
            }
          ]
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur analyse image Gemini:', error);
      throw error;
    }
  }

  // Pr√©visions m√©t√©o et conseils
  async getWeatherAdvice(location: string, season: string): Promise<string> {
    const systemPrompt = `En tant qu'expert m√©t√©o agricole africain, fournis des conseils pour :
    
    Localisation: ${location}
    Saison: ${season}
    
    Donne :
    1. Pr√©visions m√©t√©o g√©n√©rales
    2. Conseils de plantation
    3. Gestion de l'irrigation
    4. Protection des cultures
    5. Techniques traditionnelles de pr√©vision m√©t√©o
    
    Adapte tes conseils au contexte local africain.`;

    return this.makeRequest(systemPrompt);
  }
}

export const geminiService = new GeminiService(); 